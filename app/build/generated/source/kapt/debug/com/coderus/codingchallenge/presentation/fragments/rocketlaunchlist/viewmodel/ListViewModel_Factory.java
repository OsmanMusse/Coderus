// Generated by Dagger (https://dagger.dev).
package com.coderus.codingchallenge.presentation.fragments.rocketlaunchlist.viewmodel;

import com.coderus.codingchallenge.domain.repository.LauncherRepository;
import dagger.internal.DaggerGenerated;
import dagger.internal.Factory;
import dagger.internal.QualifierMetadata;
import dagger.internal.ScopeMetadata;
import javax.inject.Provider;
import kotlinx.coroutines.CoroutineDispatcher;

@ScopeMetadata
@QualifierMetadata
@DaggerGenerated
@SuppressWarnings({
    "unchecked",
    "rawtypes"
})
public final class ListViewModel_Factory implements Factory<ListViewModel> {
  private final Provider<LauncherRepository> listRepositoryProvider;

  private final Provider<CoroutineDispatcher> dispatcherProvider;

  public ListViewModel_Factory(Provider<LauncherRepository> listRepositoryProvider,
      Provider<CoroutineDispatcher> dispatcherProvider) {
    this.listRepositoryProvider = listRepositoryProvider;
    this.dispatcherProvider = dispatcherProvider;
  }

  @Override
  public ListViewModel get() {
    return newInstance(listRepositoryProvider.get(), dispatcherProvider.get());
  }

  public static ListViewModel_Factory create(Provider<LauncherRepository> listRepositoryProvider,
      Provider<CoroutineDispatcher> dispatcherProvider) {
    return new ListViewModel_Factory(listRepositoryProvider, dispatcherProvider);
  }

  public static ListViewModel newInstance(LauncherRepository listRepository,
      CoroutineDispatcher dispatcher) {
    return new ListViewModel(listRepository, dispatcher);
  }
}
