// Generated by Dagger (https://dagger.dev).
package com.coderus.codingchallenge.di;

import com.coderus.codingchallenge.data.local.AppDatabase;
import com.coderus.codingchallenge.data.remote.APIService;
import com.coderus.codingchallenge.domain.repository.LauncherRepository;
import dagger.internal.DaggerGenerated;
import dagger.internal.Factory;
import dagger.internal.Preconditions;
import dagger.internal.QualifierMetadata;
import dagger.internal.ScopeMetadata;
import javax.inject.Provider;

@ScopeMetadata("javax.inject.Singleton")
@QualifierMetadata
@DaggerGenerated
@SuppressWarnings({
    "unchecked",
    "rawtypes"
})
public final class RepositoryModule_ProvideRepositoryFactory implements Factory<LauncherRepository> {
  private final Provider<AppDatabase> databaseProvider;

  private final Provider<APIService> apiProvider;

  public RepositoryModule_ProvideRepositoryFactory(Provider<AppDatabase> databaseProvider,
      Provider<APIService> apiProvider) {
    this.databaseProvider = databaseProvider;
    this.apiProvider = apiProvider;
  }

  @Override
  public LauncherRepository get() {
    return provideRepository(databaseProvider.get(), apiProvider.get());
  }

  public static RepositoryModule_ProvideRepositoryFactory create(
      Provider<AppDatabase> databaseProvider, Provider<APIService> apiProvider) {
    return new RepositoryModule_ProvideRepositoryFactory(databaseProvider, apiProvider);
  }

  public static LauncherRepository provideRepository(AppDatabase database, APIService api) {
    return Preconditions.checkNotNullFromProvides(RepositoryModule.INSTANCE.provideRepository(database, api));
  }
}
