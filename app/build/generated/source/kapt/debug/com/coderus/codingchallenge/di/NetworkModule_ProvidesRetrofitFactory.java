// Generated by Dagger (https://dagger.dev).
package com.coderus.codingchallenge.di;

import dagger.internal.DaggerGenerated;
import dagger.internal.Factory;
import dagger.internal.Preconditions;
import dagger.internal.QualifierMetadata;
import dagger.internal.ScopeMetadata;
import javax.inject.Provider;
import okhttp3.OkHttpClient;
import retrofit2.Converter;
import retrofit2.Retrofit;

@ScopeMetadata("javax.inject.Singleton")
@QualifierMetadata
@DaggerGenerated
@SuppressWarnings({
    "unchecked",
    "rawtypes"
})
public final class NetworkModule_ProvidesRetrofitFactory implements Factory<Retrofit> {
  private final Provider<OkHttpClient> okHttpClientProvider;

  private final Provider<Converter.Factory> converterProvider;

  public NetworkModule_ProvidesRetrofitFactory(Provider<OkHttpClient> okHttpClientProvider,
      Provider<Converter.Factory> converterProvider) {
    this.okHttpClientProvider = okHttpClientProvider;
    this.converterProvider = converterProvider;
  }

  @Override
  public Retrofit get() {
    return providesRetrofit(okHttpClientProvider.get(), converterProvider.get());
  }

  public static NetworkModule_ProvidesRetrofitFactory create(
      Provider<OkHttpClient> okHttpClientProvider, Provider<Converter.Factory> converterProvider) {
    return new NetworkModule_ProvidesRetrofitFactory(okHttpClientProvider, converterProvider);
  }

  public static Retrofit providesRetrofit(OkHttpClient okHttpClient, Converter.Factory converter) {
    return Preconditions.checkNotNullFromProvides(NetworkModule.INSTANCE.providesRetrofit(okHttpClient, converter));
  }
}
