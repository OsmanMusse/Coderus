// Generated by Dagger (https://dagger.dev).
package com.coderus.codingchallenge.di;

import com.coderus.codingchallenge.data.local.AppDatabase;
import com.coderus.codingchallenge.data.local.LaunchDao;
import dagger.internal.DaggerGenerated;
import dagger.internal.Factory;
import dagger.internal.Preconditions;
import dagger.internal.QualifierMetadata;
import dagger.internal.ScopeMetadata;
import javax.inject.Provider;

@ScopeMetadata("javax.inject.Singleton")
@QualifierMetadata
@DaggerGenerated
@SuppressWarnings({
    "unchecked",
    "rawtypes"
})
public final class DatabaseModule_ProvideLauncherDaoFactory implements Factory<LaunchDao> {
  private final Provider<AppDatabase> databaseProvider;

  public DatabaseModule_ProvideLauncherDaoFactory(Provider<AppDatabase> databaseProvider) {
    this.databaseProvider = databaseProvider;
  }

  @Override
  public LaunchDao get() {
    return provideLauncherDao(databaseProvider.get());
  }

  public static DatabaseModule_ProvideLauncherDaoFactory create(
      Provider<AppDatabase> databaseProvider) {
    return new DatabaseModule_ProvideLauncherDaoFactory(databaseProvider);
  }

  public static LaunchDao provideLauncherDao(AppDatabase database) {
    return Preconditions.checkNotNullFromProvides(DatabaseModule.INSTANCE.provideLauncherDao(database));
  }
}
